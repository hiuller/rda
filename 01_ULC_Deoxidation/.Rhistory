summary(lr.model)
func <- function(Oppm, TLib, modelo){
pl <- 0.3627243
return((log(pl/(1-pl)) - modelo$coefficients[1] - modelo$coefficients[3]*Oppm - modelo$coefficients[4]*TLib) / modelo$coefficients[2])
}
curve(expr=func(x, 1560, lr.model), from=200, to=1200, xlab="[O], ppm", ylab="T, ºC")
curve(expr=func(x, 1570, lr.model), from=200, to=1200, xlab="[O], ppm", ylab="T, ºC", add=TRUE)
curve(expr=func(x, 1580, lr.model), from=200, to=1200, xlab="[O], ppm", ylab="T, ºC", add=TRUE)
curve(expr=func(x, 1590, lr.model), from=200, to=1200, xlab="[O], ppm", ylab="T, ºC", add=TRUE)
curve(expr=func(x, 1600, lr.model), from=200, to=1200, xlab="[O], ppm", ylab="T, ºC", add=TRUE)
curve(expr=func(x, 1610, lr.model), from=200, to=1200, xlab="[O], ppm", ylab="T, ºC", add=TRUE)
x <- seq(from=200,  to=1200, by=100)
y <- seq(from=1560, to=1620, by=10)
func
x <- seq(from=200,  to=1200, by=100)
y <- seq(from=1560, to=1620, by=10)
myfunc <- function(a, b) func(Oppm=a, Tlib=b, model=lr.model)
z <- outer(x, y, myfunc)
myfunc <- function(a, b) func(Oppm=a, TLib=b, model=lr.model)
z <- outer(x, y, myfunc)
# http://www.bretttolbert.com/projects/colorscale/
mycolors = c('#3d22e5', '#2a7ee5', '#33e5dd', '#3be479', '#68e444', '#c8e44c', '#e3a955', '#e35d5d')
mylevels <- seq(from=1560, to=1620, by=10)
contour (x, y, z, levels=mylevels, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue")
z
x <- seq(from=200,  to=1200, by=100)
y <- seq(from=1560, to=1620, by=10)
y <- 1650
x
y
z <- outer(x, y, myfunc)
z
plot(z)
plot(z, x)
summary(lm(z~x))
contour (x, y, z, levels=mylevels, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue")
contour (x, y, z, levels=1650, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue")
contour (x, y, z, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue")
contour (x, y, z, nlevels=1, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue")
y<-c(1650, 1700)
z <- outer(x, y, myfunc)
z
contour (x, y, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue")
contour (x, y, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.5)
contour (x, y, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.2)
source('C:/Users/Public/Documents/RDataAnalysis/01_ULC_Deoxidation/eda.R')
x
x <- seq(from=200,  to=1200, by=100)
y <- seq(from=1560, to=1620, by=10)
myfunc <- function(a, b) func(Oppm=a, TLib=b, model=lr.model)
z <- outer(x, y, myfunc)
rm(list=ls())
old.par <- par()
#setwd("J:/RDataAnalysis/01_ULC_Deoxidation")
setwd("C:/Users/Public/Documents/RDataAnalysis/01_ULC_Deoxidation")
# after the preprossecing.r
data <- read.csv("./data/data_wo_ol.csv")
# this code is for tabulation purposes
data$cod <- paste(as.integer(data$N_BLOW>0), as.integer(data$CANR_APOS_DESOX>0))
table(data$LIGA, data$cod)
# this bollean tells weather it as pre-deoxidized or not (don't forget the space at the end...)
data$PRED = (data$LIGA == "SIBR ")
# this Ind. var. tells weather it was a good decision or not
for(i in 1:5386){
if (data$cod[i] == "0 0"){
data$RESULT[i] <- TRUE
} else  {
if (data$cod[i] == "1 1"){
data$RESULT[i] <- FALSE
} else {
if(data$PRED[i]==TRUE) {
if(data$cod[i] == "1 0") {
data$RESULT[i] <- FALSE
} else  {
data$RESULT[i] <- TRUE
}
} else {
if(data$cod[i] == "1 0") {
data$RESULT[i] <- TRUE
} else  {
data$RESULT[i] <- FALSE
}
}
}
}
}
rm(i)
trainning <- subset(data, data$RESULT==TRUE)
lr.model <- glm(PRED ~ TEMPA + OPPMA + T_LIBER, data=trainning, family=binomial("logit"))
summary(lr.model)
func <- function(Oppm, TLib, modelo){
pl <- 0.3627243
return((log(pl/(1-pl)) - modelo$coefficients[1] - modelo$coefficients[3]*Oppm - modelo$coefficients[4]*TLib) / modelo$coefficients[2])
}
x <- seq(from=200,  to=1200, by=100)
y <- seq(from=1560, to=1620, by=10)
myfunc <- function(a, b) func(Oppm=a, TLib=b, model=lr.model)
z <- outer(x, y, myfunc)
z
z''
prime(z)
t(z)
mylevels <- seq(from=1560, to=1620, by=10)
contour (x, y, t(z), levels=mylevels, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.2)
contour (x, y, z, levels=mylevels, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.2)
dev.off()
contour (x, y, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.2)
y
contour (x, y, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.2)
x <- seq(from=200,  to=1200, by=100)
y <- seq(from=1570, to=1590, by=10)
#y <- 1650
myfunc <- function(a, b) func(Oppm=a, TLib=b, model=lr.model)
z <- outer(x, y, myfunc)
# http://www.bretttolbert.com/projects/colorscale/
mycolors = c('#3d22e5', '#2a7ee5', '#33e5dd', '#3be479', '#68e444', '#c8e44c', '#e3a955', '#e35d5d')
contour (x, y, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.2)
contour (x, y, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1)
z
contour ( y, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1)
contour ( x, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1)
z
x
y
contour (y, x, t(z), levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1)
contour (y, x, t(z), levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=c("Tlib=1570", "Tlib=1580", "Tlib1590"))
myLab = c("Tl=1570ºC", "Tl=1580ºC", "Tl=1590°C")
contour (x, y, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
dev.off()
contour (x, y, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
z
points(200, 1586.542)
points(399, 1582.515)
points(399, 1582.515, pch=19, col="red")
points(399, 1586.542, pch=19, col="red")
points(200, 1586.542, pch=19, col="red")
x
y
z
dev.off()
contour (x, y, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
points(200, 1586.542, pch=19, col="red")
points(300, 1582.515, pch=19, col="red")
points(400, 1578.488, pch=19, col="red")
points(500, 1574.461, pch=19, col="red")
points(600, 1570.434, pch=19, col="red")
library("lattice")
help(lib="lattice")
?lattice
?countourplot
data.frame(cbind(x, z))
test <- data.frame(cbind(x, z))
contourplot(V2 ~ V3 * x, data=test)
contourplot(V3 ~ V2 * x, data=test)
func
myFunc
myfunc
mat <- outer(x, y, myfunc(x, y))
x
y
z
mat <- outer(x, y, myfunc)
mat
z
plot(mat)
plot(x~mat)
plot(mat[,1]~x)
countourplot(mat, at=y)
contourplot(mat, at=y)
\
z
myfunc(x[10], y[2])
plot(z[,1] ~ x)
plot(z[,1] ~ x, type="l")
plot(z[,1] ~ x, type="l", col="blue", lwd=3)
plot(z[,1] ~ x, type="l", col="blue", lwd=3, ylab="T celox, ºC", xlab="[O], ppm")
dev.off()
plot(z[,1] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm")
plot(z[,2] ~ x, type="l", col="red", lwd=3, ylab="T , ºC", xlab="[O], ppm", add=TRUE)
par(new=F)
plot(z[,2] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm")
dev.off()
par(mar=c(2,4,0,2)+0.1)
plot(z[,1] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm")
par(new=T)
plot(z[,2] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm")
dev.off()
par(old.par)
plot(z[,1] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm")
dev.off()
plot(z[,1] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=c(1550,1580))
par(new=T)
plot(z[,2] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm")
yvar <- c(1550,1580)
yvar <- c(1550,1580)
dev.off()
par(old.par)
par(mar=c(2,4,0,2)+0.1)
plot(z[,1] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar)
par(new=T)
plot(z[,2] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar)
plot(z[,3] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar)
dev.off()
par(old.par)
plot(z[,1] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar)
par(new=T)
plot(z[,2] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar)
par(new=T)
plot(z[,3] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar)
xvar <- c(400,1200)
dev.off()
par(old.par)
plot(z[,1] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
par(new=T)
plot(z[,2] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
par(new=T)
plot(z[,3] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
xvar <- c(500,1200)
plot(z[,1] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
par(new=T)
plot(z[,2] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
par(new=T)
plot(z[,3] ~ x, type="l", col="blue", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
par(new=T)
plot(z[,2] ~ x, type="l", col="red",   lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
par(new=T)
plot(z[,3] ~ x, type="l", col="green", lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
?text
text(myLab[1], x=550, y=1555, srt="45")
text(myLab[1], x=550, y=1555, srt="-45", col="blue")
text(myLab[1], x=550, y=1555, srt="-45", col="blue", cex=1.2)
text(myLab[1], x=550, y=1555, srt="-45", col="blue", cex=1.1)
model
lr.model
slope
slope <- lm(z[,1]~x)$coefficients[2]
slope
?deg
?rad
?radians
angle
pi()
PI
PI()
?pi
pi
angle <- slope * 180 / pi
angle
angle <- as.character(slope * 180 / pi)
angle
dev.off()
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=1555, srt=angle, col="blue", cex=1.1)
angle <- as.character(pi + (slope * 180 / pi))
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=1555, srt=angle, col="blue", cex=1.1)
angle
angle <- as.character(2*pi + (slope * 180 / pi))
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=1555, srt=angle, col="blue", cex=1.1)
angle <- as.character(slope * 180 / pi)
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=1555, srt=angle, col="blue", cex=1.1)
angle <- as.character(pi - (slope * 180 / pi))
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=1555, srt=angle, col="blue", cex=1.1)
angle <- as.character(2*pi - (slope * 180 / pi))
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=1555, srt=angle, col="blue", cex=1.1)
angle <- as.character(slope * 180 / pi)
arctan
?tan
angle <- as.character(atan(slope) * 180 / pi)
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=1555, srt=angle, col="blue", cex=1.1)
atan(slope)
slope
angle <- as.character(tan(slope) * 180 / pi)
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=1555, srt=angle, col="blue", cex=1.1)
slope
tan(slope)
slope = (myfunc(yvar[2])-myfunc(yvar[1]))/(myfunc(xvar[2])-myfunc(xvar[1]))
slope = (myfunc(yvar[2], 1650)-myfunc(yvar[1],1650))/(myfunc(xvar[2],1650)-myfunc(xvar[1],1650))
slope
angle <- as.character(tan(slope) * 180 / pi)
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=1555, srt=angle, col="blue", cex=1.1)
dev.off()
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt=angle, col="blue", cex=1.1)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-46", col="blue", cex=1.1)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-45", col="blue", cex=1.1)
dev.off()
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-45", col="blue", cex=1.1)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-44", col="blue", cex=1.1)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-41", col="blue", cex=1.1)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-39", col="blue", cex=1.1)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-30", col="blue", cex=1.1)
dev.off()
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-30", col="blue", cex=1.1)
dev.off()
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1)
?par
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, bg="white")
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, bg="white")
dev.off()
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, bg="white", bty="o")
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, bg="white", bty="1")
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, bg="white", bty="l")
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, bg="white", bty="7")
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, bg="white", bty="c")
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, bg="white", bty="l")
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, bg="white", bty="c")
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, bg="yellow")
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, bg="yellow")
?text
library(vegan)
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
par(bg="yellow")
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, b)
plot(z[,1] ~ x, type="l", col="blue",  lwd=3, ylab="T , ºC", xlab="[O], ppm", ylim=yvar, xlim=xvar)
text(myLab[1], x=550, y=myfunc(550, y[1]), srt="-29", col="blue", cex=1.1, box="solid")
par(old.par)
x <- seq(from=200,  to=1200, by=100)
y <- seq(from=1570, to=1590, by=10)
myfunc <- function(a, b) func(Oppm=a, TLib=b, model=lr.model)
z <- outer(x, y, myfunc)
# http://www.bretttolbert.com/projects/colorscale/
mycolors = c('#3d22e5', '#2a7ee5', '#33e5dd', '#3be479', '#68e444', '#c8e44c', '#e3a955', '#e35d5d')
myLab = c("Tl=1570ºC", "Tl=1580ºC", "Tl=1590°C")
contour (x, y, z, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
class(z)
z
rev(z)
rev(z[,1])
z2 <- cbind(rev(z[,1]), rev(z[,2]), rev(z[,3]))
z
z2
z2 <- cbind(rev(z[,1]), rev(z[,2]), rev(z[,3]))
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
points(200, 1586.542, pch=19, col="red")
points(300, 1582.515, pch=19, col="red")
points(400, 1578.488, pch=19, col="red")
points(500, 1574.461, pch=19, col="red")
points(600, 1570.434, pch=19, col="red")
contour (x, y, z2,  xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
dev.off()
contour (x, y, z2,  xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
points(200, 1586.542, pch=19, col="red")
points(300, 1582.515, pch=19, col="red")
points(400, 1578.488, pch=19, col="red")
points(500, 1574.461, pch=19, col="red")
points(600, 1570.434, pch=19, col="red")
z2
contour (x, y, z2, nlevels-3, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
contour (x, y, z2, nlevels=3, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
points(200, 1586.542, pch=19, col="red")
points(300, 1582.515, pch=19, col="red")
points(400, 1578.488, pch=19, col="red")
points(500, 1574.461, pch=19, col="red")
points(600, 1570.434, pch=19, col="red")
y
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
points(200, 1586.542, pch=19, col="red")
points(300, 1582.515, pch=19, col="red")
points(400, 1578.488, pch=19, col="red")
points(500, 1574.461, pch=19, col="red")
points(600, 1570.434, pch=19, col="red")
countour(z)
contour(z)
contour(z2)
points(200, 1586.542, pch=19, col="red")
points(300, 1582.515, pch=19, col="red")
points(400, 1578.488, pch=19, col="red")
points(500, 1574.461, pch=19, col="red")
points(600, 1570.434, pch=19, col="red")
points(1, 1586.542, pch=19, col="red")
points(2, 1582.515, pch=19, col="red")
points(3, 1578.488, pch=19, col="red")
points(4, 1574.461, pch=19, col="red")
points(5, 1570.434, pch=19, col="red")
dev.off()
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
points(200, 1586.542, pch=19, col="red")
points(300, 1582.515, pch=19, col="red")
points(400, 1578.488, pch=19, col="red")
points(500, 1574.461, pch=19, col="red")
points(600, 1570.434, pch=19, col="red")
for(i in 1:length(x)) { points(x[i], z[i,1], pch=19, col="red")}
dev.off()
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
for(i in 1:length(x)) { points(x[i], z[i,1], pch=19, col="red")}
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
for(j in 1:length(y)) {   for(i in 1:length(x)) { points(x[i], z[i,j], pch=19, col="red")} }
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
# those are the actual points
for(j in 1:length(y)) {   for(i in 1:length(x)) { points(x[i], z[i,j], pch=19, col="red")} }
dev.off()
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
# those are the actual points
for(j in 1:length(y)) {   for(i in 1:length(x)) { points(x[i], z[i,j], pch=19, col="red")} }
contour (x-200, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
# those are the actual points
for(j in 1:length(y)) {   for(i in 1:length(x)) { points(x[i], z[i,j], pch=19, col="red")} }
par(old.par)
par(mar=c(2,4,0,2)+0.1)
pdf("latex/figures/fig05.pdf", height=6, width=6)
x <- seq(from=200,  to=1200, by=100)
y <- seq(from=1570, to=1590, by=10)
myfunc <- function(a, b) func(Oppm=a, TLib=b, model=lr.model)
z <- outer(x, y, myfunc)
z2 <- cbind(rev(z[,1]), rev(z[,2]), rev(z[,3]))
myLab = c("Tl=1570ºC", "Tl=1580ºC", "Tl=1590°C")
contour (x-200, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
dev.off()
data
names(data)
names(trainning)
plot(trainning$TEMPA)
summary(trainning$TEMPA)
x <- seq(from=200,  to=1200, by=100)
y <- seq(from=1540, to=1610, by=10)
myfunc <- function(a, b) func(Oppm=a, TLib=b, model=lr.model)
z <- outer(x, y, myfunc)
z2 <- cbind(rev(z[,1]), rev(z[,2]), rev(z[,3]))
contour (x-200, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
x
y
z
x <- seq(from=200,  to=1200, by=100)
y <- seq(from=1540, to=1610, by=30)
myfunc <- function(a, b) func(Oppm=a, TLib=b, model=lr.model)
z <- outer(x, y, myfunc)
z2 <- cbind(rev(z[,1]), rev(z[,2]), rev(z[,3]))
z2
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
y
dev.off()
par(old.par)
par(mar=c(2,4,0,2)+0.1)
pdf("latex/figures/fig05.pdf", height=6, width=6)
# http://acad.depauw.edu/harvey_web/Chem%20351/PDF%20Files/Handouts/RDocs/Creating%20Surface%20and%20Contour%20Plots%20in%20R.pdf
x <- seq(from=200,  to=1200, by=100)
y <- seq(from=1540, to=1610, by=30)
myfunc <- function(a, b) func(Oppm=a, TLib=b, model=lr.model)
z <- outer(x, y, myfunc)
z2 <- cbind(rev(z[,1]), rev(z[,2]), rev(z[,3]))
# http://www.bretttolbert.com/projects/colorscale/
mycolors = c('#3d22e5', '#2a7ee5', '#33e5dd', '#3be479', '#68e444', '#c8e44c', '#e3a955', '#e35d5d')
myLab = c("Tl=1540ºC", "Tl=1570ºC", "Tl=1600°C")
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
dev.off()
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
for(j in 1:length(y)) {   for(i in 1:length(x)) { points(x[i], z[i,j], pch=19, col="red")} }
contour (x-100, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
# those are the actual points
for(j in 1:length(y)) {   for(i in 1:length(x)) { points(x[i], z[i,j], pch=19, col="red")} }
contour (x-50, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
# those are the actual points
for(j in 1:length(y)) {   for(i in 1:length(x)) { points(x[i], z[i,j], pch=19, col="red")} }
contour (x-90, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
# those are the actual points
for(j in 1:length(y)) {   for(i in 1:length(x)) { points(x[i], z[i,j], pch=19, col="red")} }
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
# those are the actual points
for(j in 1:length(y)) {   for(i in 1:length(x)) { points(x[i], z[i,j], pch=19, col="red")} }
contour (x-200, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
# those are the actual points
for(j in 1:length(y)) {   for(i in 1:length(x)) { points(x[i], z[i,j], pch=19, col="red")} }
contour (x, y, z2, levels=y, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
myfunc
x <- seq(from=200,  to=1200, by=100) #oppm
y <- seq(from=1540, to=1610, by=30)  #tcelox
lev <- c(1570, 1580, 1590)
myfunc <- function(a, b) func(Oppm=a, TLib=b, model=lr.model)
z <- outer(x, y, myfunc)
z2 <- cbind(rev(z[,1]), rev(z[,2]), rev(z[,3]))
myLab = c("Tl=1570ºC", "Tl=1580ºC", "Tl=1590°C")
contour (x, y, z2, levels=lev, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
for(j in 1:length(y)) {   for(i in 1:length(x)) { points(x[i], z[i,j], pch=19, col="red")} }
contour (x, y, z2, levels=lev, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
myfunc
teste <- myfunc(800,1570)
teste
par(old.par)
par(mar=c(2,4,0,2)+0.1)
pdf("latex/figures/fig05.pdf", height=6, width=6)
# http://acad.depauw.edu/harvey_web/Chem%20351/PDF%20Files/Handouts/RDocs/Creating%20Surface%20and%20Contour%20Plots%20in%20R.pdf
x <- seq(from=200,  to=1200, by=100) #oppm
y <- seq(from=1540, to=1610, by=30)  #tcelox
lev <- c(1570, 1580, 1590)
myfunc <- function(a, b) func(Oppm=a, TLib=b, model=lr.model)
z <- outer(x, y, myfunc)
z2 <- cbind(rev(z[,1]), rev(z[,2]), rev(z[,3]))
# http://www.bretttolbert.com/projects/colorscale/
mycolors = c('#3d22e5', '#2a7ee5', '#33e5dd', '#3be479', '#68e444', '#c8e44c', '#e3a955', '#e35d5d')
myLab = c("Tl=1570ºC", "Tl=1580ºC", "Tl=1590°C")
contour (x, y, z2, levels=lev, xlab="[O], ppm", ylab="T, ºC", lwd=2, col="blue", labcex=1.1, labels=myLab)
dev.off()
